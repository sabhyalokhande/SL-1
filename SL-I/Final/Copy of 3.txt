To perform these CRUD operations in MongoDB, you can use the following commands and queries. Hereâ€™s a step-by-step guide for each operation based on your requirements:

### 1. Create Database `DYPIEMR`
```javascript
use DYPIEMR
```

### 2. Create Collections `Teachers` and `Students`
```javascript
db.createCollection("Teachers")
db.createCollection("Students")
```

#### Insert Sample Data into `Teachers` and `Students` Collections
```javascript
db.Teachers.insertMany([
    { Tname: "Praveen", dno: 1, dname: "Computer", experience: 5, salary: 12000, date_of_joining: new Date("2015-08-01") },
    { Tname: "Suresh", dno: 2, dname: "IT", experience: 8, salary: 15000, date_of_joining: new Date("2013-06-15") },
    { Tname: "Rajesh", dno: 3, dname: "E&TC", experience: 6, salary: 11000, date_of_joining: new Date("2017-02-20") }
])

db.Students.insertMany([
    { Sname: "John", roll_no: 1, class: "10th" },
    { Sname: "XYZ", roll_no: 2, class: "10th" },
    { Sname: "Mary", roll_no: 3, class: "9th" }
])
```

### 3. Find the Information about All Teachers
```javascript
db.Teachers.find()
```

### 4. Find the Information about All Teachers of Computer Department
```javascript
db.Teachers.find({ dname: "Computer" })
```

### 5. Find the Information about All Teachers of Computer, IT, and E&TC Departments
```javascript
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] } })
```

### 6. Find the Information about All Teachers of Computer, IT, and E&TC Departments with Salary Greater Than or Equal to 10000
```javascript
db.Teachers.find({
    dname: { $in: ["Computer", "IT", "E&TC"] },
    salary: { $gte: 10000 }
})
```

### 7. Find the Student Information Having `roll_no = 2` or `Sname = 'xyz'`
```javascript
db.Students.find({ $or: [{ roll_no: 2 }, { Sname: "xyz" }] })
```

### 8. Update the Experience of Teacher "Praveen" to 10 Years (If Not Available, Insert as New Entry)
```javascript
db.Teachers.updateOne(
    { Tname: "Praveen" },
    { $set: { experience: 10 } },
    { upsert: true }
)
```

### 9. Update the Department of All Teachers Working in IT Department to COMP
```javascript
db.Teachers.updateMany(
    { dname: "IT" },
    { $set: { dname: "COMP" } }
)
```

### 10. Find the Teachers' Names and Their Experience from the Teachers Collection
```javascript
db.Teachers.find({}, { Tname: 1, experience: 1})
```

### 11. Insert One Entry in Department Collection Using `save()`
```javascript
db.Department.save({ dname: "Mechanical", dno: 4 })
```

### 12. Change the Department of Teacher "Praveen" to IT Using `save()`
```javascript
db.Teachers.save({ Tname: "Praveen", dname: "IT", dno: 2, experience: 10, salary: 12000, date_of_joining: new Date("2015-08-01") })
```

### 13. Delete All Documents from Teachers Collection Having IT Department
```javascript
db.Teachers.deleteMany({ dname: "IT" })
```

### 14. Display with `pretty()` Method the First 3 Documents in Teachers Collection in Ascending Order
```javascript
db.Teachers.find().sort({ Tname: 1 }).limit(3).pretty()
```

These commands should help you perform the specified CRUD operations in MongoDB for the `DYPIEMR` database. Let me know if you have further questions or adjustments.