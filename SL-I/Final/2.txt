Certainly! Here is the entire code for creating the database, inserting data, and performing 10 SQL queries that demonstrate various concepts such as all types of joins, subqueries, views, and aggregate functions. A summary of the queries is included at the end.

### Complete SQL Code

```sql
-- 1. Create Database
CREATE DATABASE LibraryDB;

-- 2. Use the LibraryDB database
USE LibraryDB;

-- 3. Create Books Table
CREATE TABLE Books (
    book_id INT PRIMARY KEY,
    book_title VARCHAR(100),
    author_id INT,
    price DECIMAL(10, 2)
);

-- 4. Create Authors Table
CREATE TABLE Authors (
    author_id INT PRIMARY KEY,
    author_name VARCHAR(100),
    author_email VARCHAR(100)
);

-- 5. Insert Data into Authors table
INSERT INTO Authors (author_id, author_name, author_email)
VALUES
(1, 'J.K. Rowling', 'jk.rowling@example.com'),
(2, 'George Orwell', 'george.orwell@example.com'),
(3, 'J.R.R. Tolkien', 'jrr.tolkien@example.com');

-- 6. Insert Data into Books table
INSERT INTO Books (book_id, book_title, author_id, price)
VALUES
(101, 'Harry Potter and the Philosopher\'s Stone', 1, 20.99),
(102, '1984', 2, 15.49),
(103, 'The Hobbit', 3, 12.99),
(104, 'Harry Potter and the Chamber of Secrets', 1, 22.99),
(105, 'Animal Farm', 2, 10.49);

-- 7. 1. INNER JOIN - Get books and their corresponding authors.
SELECT b.book_title, a.author_name
FROM Books b
INNER JOIN Authors a
ON b.author_id = a.author_id;

-- 8. 2. LEFT JOIN - Get all books, even if no corresponding author exists.
SELECT b.book_title, a.author_name
FROM Books b
LEFT JOIN Authors a
ON b.author_id = a.author_id;

-- 9. 3. RIGHT JOIN - Get all authors, even if they do not have any books.
SELECT a.author_name, b.book_title
FROM Books b
RIGHT JOIN Authors a
ON b.author_id = a.author_id;

-- 10. 4. FULL OUTER JOIN - Get all books and authors, matching where possible.
SELECT b.book_title, a.author_name
FROM Books b
FULL OUTER JOIN Authors a
ON b.author_id = a.author_id;

-- 11. 5. Subquery - Find books whose price is greater than the average price of all books.
SELECT book_title, price
FROM Books
WHERE price > (SELECT AVG(price) FROM Books);

-- 12. 6. Subquery in SELECT - Get the price and author name of each book, and the count of books by the same author.
SELECT b.book_title, b.price, a.author_name,
    (SELECT COUNT(*) FROM Books WHERE author_id = b.author_id) AS books_by_author
FROM Books b
INNER JOIN Authors a
ON b.author_id = a.author_id;

-- 13. 7. Subquery in WHERE - Find authors who have more than one book.
SELECT author_name
FROM Authors
WHERE author_id IN (SELECT author_id FROM Books GROUP BY author_id HAVING COUNT(book_id) > 1);

-- 14. 8. View - Create a view to display book details (title, price) and the author's name.
CREATE VIEW BookDetails AS
SELECT b.book_title, b.price, a.author_name
FROM Books b
INNER JOIN Authors a
ON b.author_id = a.author_id;

-- Query the View
SELECT * FROM BookDetails;

-- 15. 9. Aggregate Function - Find the average price of all books.
SELECT AVG(price) AS avg_price
FROM Books;

-- 16. 10. GROUP BY and HAVING - Find authors who have books priced above 15.
SELECT a.author_name, COUNT(b.book_id) AS num_books
FROM Authors a
INNER JOIN Books b
ON a.author_id = b.author_id
GROUP BY a.author_name
HAVING AVG(b.price) > 15;
```

---

### Summary of SQL Queries:

1. **INNER JOIN**: Retrieves a list of books and their corresponding authors where there is a match in both tables (`Books` and `Authors`).
   
2. **LEFT JOIN**: Fetches all books, even if there is no corresponding author. It ensures that all rows from `Books` are returned.

3. **RIGHT JOIN**: Retrieves all authors, even if they don’t have any books associated with them. This ensures that all rows from `Authors` are returned.

4. **FULL OUTER JOIN**: Combines all books and authors, matching where possible, and includes all records from both tables, even if there’s no match.

5. **Subquery (WHERE Clause)**: Finds books whose price is higher than the average price of all books in the database.

6. **Subquery (SELECT Clause)**: Displays each book’s title, price, author name, and the count of books written by the same author.

7. **Subquery (IN Clause)**: Returns authors who have more than one book in the database, by using a `GROUP BY` in a subquery.

8. **View**: Simplifies querying for books and their author names by creating a view that combines data from the `Books` and `Authors` tables.

9. **Aggregate Function (AVG)**: Calculates the average price of all books in the library.

10. **GROUP BY and HAVING**: Groups books by author and returns only those authors who have books with an average price greater than 15.

These 10 queries demonstrate SQL operations like **joins**, **subqueries**, **aggregate functions**, and **views**, making use of a simple Library Management System with two tables: `Books` and `Authors`.